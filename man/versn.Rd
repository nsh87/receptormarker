% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/onload_checks.R
\name{versn}
\alias{versn}
\title{Get installed version}
\usage{
versn(cmd, application)
}
\arguments{
\item{cmd}{The system command to run, as a single string. The command
must generate output in the form of \emph{"Application version"}, such
as \code{Python 2.7.6}. The system command must be a single line, and
therefore should use characters such as \code{;} to indicate the end of
lines if necessary in the command.}

\item{application}{The name of an application, as a string, to check for in
the output of the system command. If, for example, "Python" is
given, the version number will only be returned if the output of the system
command begins with \code{Python}.}
}
\value{
If the package is installed, returns the version number as a
  \code{numeric} (for example, \code{2.7}), otherwise returns NULL.
}
\description{
An internal function that retrieves the version of an external application
  by executing code on the system's command line.
}
\details{
If necessary, the command passed to the paramater \code{cmd} should
  manipulate the system's output so that it matches the output format
  \emph{"Application version"}.

  Uses the \code{\link[base]{system}} function to execute system commands.
  WARNING: The \code{system} function does not always capture output to the
  Terminal window into a variable. For example, running

  \code{resp <- system(sprintf('python --version'), intern=TRUE)}

  will not capture the version number to the variable \code{resp}, but
  invoking a Python command will (see Examples below). Before using this
  function make sure you can capture the output of \code{system} to a
  variable using your \code{cmd}.
}
\examples{
\dontrun{
cmd <- paste0('python -c "import platform;',
              'print(\\'Python {}\\'.format(platform.python_version()))"',
               collapse=' ')
versn(cmd, 'Python')
}
}
\keyword{internal}

